import request from 'supertest';
import mysql from 'mysql2/promise';
import app from '../../index.js';

describe('üë§ API /api/usuarios - Biocristal', () => {
  const documentoTest = 1234567890;

  const usuarioNuevo = {
    documento_usuario: documentoTest,
    nombre_usuario: 'Juan P√©rez',
    email_usuario: 'juan.perez@example.com',
    rol_usuario: 'Administrador', 
    contrase√±a_usuario: 'securepass123'
  };

  const usuarioActualizado = {
    nombre_usuario: 'Juan P. G√≥mez',
    email_usuario: 'juan.gomez@example.com',
    rol_usuario: 'Empleado', 
    contrase√±a_usuario: 'newpass456'
  };

  it('üì• Crear usuario', async () => {
    const res = await request(app)
      .post('/api/usuarios')
      .send(usuarioNuevo)
      .expect(201);

    console.log('‚úÖ Usuario creado:', res.body);
    expect(res.body.documento_usuario).toBe(usuarioNuevo.documento_usuario);
  });

  it('üìã Obtener todos los usuarios', async () => {
    const res = await request(app).get('/api/usuarios').expect(200);
    console.log('üìö Todos los usuarios:', res.body);
    expect(Array.isArray(res.body)).toBe(true);
  });

  it('üîé Obtener usuario por documento', async () => {
    const res = await request(app)
      .get(`/api/usuarios/${usuarioNuevo.documento_usuario}`)
      .expect(200);

    console.log('üîç Usuario encontrado:', res.body);
    expect(res.body.documento_usuario).toBe(usuarioNuevo.documento_usuario);
  });

  it('‚úèÔ∏è Actualizar usuario', async () => {
    const res = await request(app)
      .put(`/api/usuarios/${usuarioNuevo.documento_usuario}`)
      .send(usuarioActualizado)
      .expect(200);

    console.log('üõ†Ô∏è Usuario actualizado:', res.body);
    expect(res.body.message).toBe('Usuario actualizado correctamente');
  });

  it('üîÅ Confirmar usuario actualizado', async () => {
    const res = await request(app)
      .get(`/api/usuarios/${usuarioNuevo.documento_usuario}`)
      .expect(200);

    console.log('üìå Usuario actualizado:', res.body);
    expect(res.body.nombre_usuario).toBe(usuarioActualizado.nombre_usuario);
  });

  /* ---------------- Recuperaci√≥n de contrase√±a ---------------- */
  let resetToken = '';

  it('üìß Solicitar recuperaci√≥n de contrase√±a', async () => {
    const res = await request(app)
      .post('/api/usuarios/forgot-password')
      .send({ email_usuario: usuarioActualizado.email_usuario })
      .expect(200);

    console.log('üì© Respuesta forgot-password:', res.body);
    expect(res.body.message).toContain('enlace de recuperaci√≥n');

    // üìå Crear conexi√≥n directa SOLO para leer el token
    const pool = await mysql.createConnection({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME
    });

    const [rows] = await pool.query(
      'SELECT reset_token FROM usuarios WHERE email_usuario = ?',
      [usuarioActualizado.email_usuario]
    );

    resetToken = rows[0]?.reset_token;
    await pool.end();

    console.log('üîë Token generado en BD:', resetToken);
    expect(resetToken).toBeTruthy();
  });

  it('üîì Cambiar contrase√±a con token v√°lido', async () => {
    const res = await request(app)
      .post(`/api/usuarios/reset-password/${resetToken}`)
      .send({ nueva_contrase√±a: 'passwordNueva123' })
      .expect(200);

    console.log('‚úÖ Respuesta reset-password:', res.body);
    expect(res.body.message).toBe('Contrase√±a actualizada correctamente');
  });

  it('üö´ Reuso de token (ya utilizado)', async () => {
    const res = await request(app)
      .post(`/api/usuarios/reset-password/${resetToken}`)
      .send({ nueva_contrase√±a: 'passwordNueva123' })
      .expect(400);

    console.log('‚ùå Reuso de token:', res.body);
    expect(res.body.message).toContain('Token inv√°lido o expirado');
  });

  /* ---------------- Eliminar usuario ---------------- */
  it('üóëÔ∏è Eliminar usuario', async () => {
    const res = await request(app)
      .delete(`/api/usuarios/${usuarioNuevo.documento_usuario}`)
      .expect(200);

    console.log('üßπ Usuario eliminado:', res.body);
    expect(res.body.message).toBe('Usuario eliminado correctamente');
  });

  it('‚ùå Confirmar eliminaci√≥n de usuario', async () => {
    await request(app)
      .get(`/api/usuarios/${usuarioNuevo.documento_usuario}`)
      .expect(404);

    console.log(`‚ùå Confirmado: usuario con documento ${usuarioNuevo.documento_usuario} fue eliminado`);
  });
});
