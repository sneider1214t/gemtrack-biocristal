// src/test/Transaccion.test.js
import request from 'supertest';
import app from '../../index.js'; // ‚úÖ Importa tu app correctamente

describe('üßæ API /api/transaccion - Biocristal', () => {
  const transaccionNueva = {
    codigo_transaccion: 'TRANS999',
    fecha_transaccion: '2025-07-03',
    tipo_transaccion: 'Transferencia', // ‚úÖ Ahora texto en vez de n√∫mero
    ingreso_caja: 50000,
    egreso_caja: 0,
    documento_usuario: 1001 // Aseg√∫rate que este documento exista en tu tabla Usuario
  };

  const transaccionActualizada = {
    fecha_transaccion: '2025-07-04',
    tipo_transaccion: 'Efectivo', // ‚úÖ Ahora texto en vez de n√∫mero
    ingreso_caja: 0,
    egreso_caja: 45000,
    documento_usuario: 1001
  };

  // üì¶ Crear una transacci√≥n
  it('üì¶ Crear transacci√≥n', async () => {
    const res = await request(app)
      .post('/api/transaccion')
      .send(transaccionNueva)
      .expect(201);

    console.log('‚úÖ Transacci√≥n creada:', res.body);
    expect(res.body.codigo_transaccion).toBe(transaccionNueva.codigo_transaccion);
  });

  // üìã Obtener todas las transacciones
  it('üìã Obtener todas las transacciones', async () => {
    const res = await request(app)
      .get('/api/transaccion')
      .expect(200);

    console.log('üìö Todas las transacciones:', res.body);
    expect(Array.isArray(res.body)).toBe(true);
  });

  // üîç Obtener transacci√≥n por c√≥digo
  it('üîç Obtener transacci√≥n por c√≥digo', async () => {
    const res = await request(app)
      .get(`/api/transaccion/${transaccionNueva.codigo_transaccion}`)
      .expect(200);

    console.log('üîé Transacci√≥n encontrada:', res.body);
    expect(res.body.codigo_transaccion).toBe(transaccionNueva.codigo_transaccion);
  });

  // ‚úèÔ∏è Actualizar transacci√≥n
  it('‚úèÔ∏è Actualizar transacci√≥n', async () => {
    const res = await request(app)
      .put(`/api/transaccion/${transaccionNueva.codigo_transaccion}`)
      .send(transaccionActualizada)
      .expect(200);

    console.log('üõ†Ô∏è Transacci√≥n actualizada:', res.body);
    expect(res.body.message).toBe('Transacci√≥n actualizada correctamente');
  });

  // üîÅ Confirmar actualizaci√≥n
  it('üîÅ Confirmar transacci√≥n actualizada', async () => {
    const res = await request(app)
      .get(`/api/transaccion/${transaccionNueva.codigo_transaccion}`)
      .expect(200);

    console.log('üìå Transacci√≥n actualizada:', res.body);
    expect(res.body.tipo_transaccion).toBe(transaccionActualizada.tipo_transaccion);
    expect(res.body.egreso_caja).toBe(transaccionActualizada.egreso_caja);
  });

  // üóëÔ∏è Eliminar transacci√≥n
  it('üóëÔ∏è Eliminar transacci√≥n', async () => {
    const res = await request(app)
      .delete(`/api/transaccion/${transaccionNueva.codigo_transaccion}`)
      .expect(200);

    console.log('üßπ Transacci√≥n eliminada:', res.body);
    expect(res.body.message).toBe('Transacci√≥n eliminada correctamente');
  });

  // ‚ùå Confirmar eliminaci√≥n
  it('‚ùå Confirmar transacci√≥n eliminada', async () => {
    const res = await request(app)
      .get(`/api/transaccion/${transaccionNueva.codigo_transaccion}`)
      .expect(404);

    console.log(`‚ùå Confirmado: transacci√≥n con c√≥digo ${transaccionNueva.codigo_transaccion} fue eliminada`);
  });
});
